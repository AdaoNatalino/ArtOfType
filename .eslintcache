[{"/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/App.tsx":"1","/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/index.tsx":"2","/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/API.ts":"3","/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/Context.tsx":"4","/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/reducer.ts":"5"},{"size":464,"mtime":1606507028105,"results":"6","hashOfConfig":"7"},{"size":225,"mtime":1606505961208,"results":"8","hashOfConfig":"7"},{"size":1715,"mtime":1606504249191,"results":"9","hashOfConfig":"7"},{"size":854,"mtime":1606506226108,"results":"10","hashOfConfig":"7"},{"size":535,"mtime":1606505695194,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hojr5f",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/App.tsx",[],"/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/index.tsx",[],"/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/API.ts",["23"],"const BASE_URL = `http://localhost:8000/artworks`;\r\n\r\nexport type Artwork = {\r\n  artist: string;\r\n  title: string;\r\n  year: string;\r\n  medium: string;\r\n  height: number;\r\n  width: number;\r\n  id: string;\r\n};\r\n\r\nconst AuthorizedFetch = (url: string, options: any = {}) => {\r\n  return fetch(url, {\r\n    method: options.method,\r\n    headers: {\r\n      ...options.headers,\r\n      Authorization: `Bearer getToken`,\r\n    },\r\n    body: options.body,\r\n  });\r\n};\r\n\r\nconst configObj = (method: string, data: Artwork | string = \"\") => {\r\n  const obj = {\r\n    method: method,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  };\r\n  return obj;\r\n};\r\n\r\nconst getAllArtworks = async (): Promise<Artwork[] | undefined> => {\r\n  try {\r\n    const artworks: Artwork[] = await (await fetch(BASE_URL)).json();\r\n    return artworks;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst getArtById = async (id: number): Promise<Artwork | undefined> => {\r\n  try {\r\n    const artwork = await (await fetch(`${BASE_URL}/${id}`)).json();\r\n    return artwork;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst deleteArtwork = async (id: number): Promise<Object> => {\r\n  try {\r\n    await fetch(`${BASE_URL}/${id}`);\r\n    return { success: true };\r\n  } catch (error) {\r\n    return { success: false };\r\n  }\r\n};\r\n\r\nconst createArt = async (data: Artwork): Promise<Artwork | undefined> => {\r\n  const obj = configObj(\"POST\", data);\r\n  try {\r\n    const newArt = await (await fetch(BASE_URL, obj)).json();\r\n    return newArt;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport { getAllArtworks, getArtById, deleteArtwork, createArt };\r\n","/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/Context.tsx",[],"/mnt/c/Users/adaoj/dev/flatiron/labs/POS/TYPESCRIPT/artwork-frontend/src/reducer.ts",[],{"ruleId":"24","severity":1,"message":"25","line":13,"column":7,"nodeType":"26","messageId":"27","endLine":13,"endColumn":22},"@typescript-eslint/no-unused-vars","'AuthorizedFetch' is assigned a value but never used.","Identifier","unusedVar"]